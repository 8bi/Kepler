

fields con valore -1 sono da riempire in seguito, vedi tracks e pois
da utenti o da processo esterno

spostamento fields profile fuori:
db.item.find(conditions...).forEach( function (doc) {
  doc.field1 = doc.field2; 
  db.item.save(doc); 
});

backup databse:
mongodump --db climbo -o climbo.dump

retore database:
mongorestore --db climbo climbo.dump/climbo/

importazione da JSON:
mongoimport -d climbo -c cittaprov citta-prov.json


Places.find().forEach(function(place) {
	if(!place.prov) {
		var prov = Climbo.geodata.provincia(place.loc);
		Places.update({_id: place._id}, {$set: {prov: prov}});
		console.log('setProvLoc', place.name, place.loc, prov);
	}
	else
		console.log(place.name, place.prov, place.loc);
	
});

rinomina db:
db.copyDatabase('easyblog','climbo');
use easyblog
db.dropDatabase();

BBOX centro italia:
db.falesie.find({loc: {$geoWithin:{$box:[[42.1135,11.3681],[42.6299,13.2014]]}}},{name:1})

COVERTE CAMPO STRINGA IN ARRAY
db.falesie.find({tracks:{$type:2}}).forEach(function(doc){
	db.falesie.update({_id: doc._id}, { $set: {tracks: [doc.tracks]} });
})

mostra dai in json:
var c = db.things.find()
while ( c.hasNext() ) printjson( c.next() )

OSM italia dti:
http://download.gfoss.it/osm/osm/

tipi falesie:
db.falesie.distinct("type")

ESTRAE SUB PROPRIETA DISTINTE:
db.cache_meteo.distinct("val.wind.dir")

ELIMINA ATTRIBUTO:
db.falesie.update( {"reg":{$exists:true} }, {$unset: {"reg":1} },false,true)

APPUNTI INDICI:
http://tecnicume.blogspot.it/2013/05/mongodb-index.html?utm_source=feedburner&utm_medium=email&utm_campaign=Feed:+Tecnicume+(tecnicume)

RITORNA SOLO IL NOME
$res = $falesie->distinct('name', array('name'=> $reg,'reg'=>1) );
	
Copia documenti da una collezione a un'altra:
db.falesieosm.find().forEach(function(doc){
   db.falesie.insert(doc);
});

SETTA ID STRINGA da una collezione ad un'altra
db.tracce.find().forEach(function(doc) {
	db.falesie.update({name: doc.features[0].properties.name},{$set: {tracks: doc._id.str}});
});

SPOSTA SETTORI FUORI DA FALESIE
db.falesie.find({settori:{$exists:1}},{name:1,settori:1}).forEach(function(doc) {
	var sett = [];
	for(s in doc.settori) {
		sett.push( db.settori.insert(doc.settori[s]) );
	}
	//TODO trovare ID!!
	db.falesie.update({_id: doc._id}, {$addToSet: {sectors: setid} }); 
});

REMOVE doc da id:
	db.falesie.remove({_id: new ObjectId("513ccde308e7bc4d04c78339")})
	
REMOVE SENZA LOC
	db.falesie.remove({loc:{$exists:false} })

RENAME FIELD:
http://docs.mongodb.org/manual/reference/operator/rename/
db.falesie.update( { _id: 1 }, { $rename: { 'name': 'name', 'cell': 'mobile' } }, false,true)

lowercase campo:
db.citta.find().forEach(function(doc) {
	if(doc.name)
		doc.name = doc.name.toLowerCase();
	db.citta.save(doc);
});

db.cache_regione.find().forEach(function(doc) {
	doc.val = doc.val.toLowerCase();
	db.cache_regione.save(doc);
});

db.falesie.find().forEach(function(doc) {
	doc.reg = doc.reg.toLowerCase();
	db.falesie.save(doc);
});


CARICA FUNZIONI JS SALVATE IN db.system.js nel db corrente:
http://docs.mongodb.org/manual/applications/server-side-javascript/

db.system.js.save(
                   { _id: "echoFunction",
                     value : function(x) { return x; }
                   }
                 )
db.eval( "echoFunction( 'test' )" )
db.loadServerScripts();		//carica funzioni nel db attuale
echoFunction(3);
myAddFunction(3, 5);


NUMERO ELEMENTI DI UN ARRAY
db.test.insert({username:"Alex", tags: ['C#', 'Java', 'C++'] });
db.test.aggregate(
  {$match: {username : "Alex"}}, 
  {$unwind: "$tags"},
  {$project: {count:{$add:1}}},
  {$group: {_id: "result", number: {$sum: "$count" }}}
);
{ "result" : [ { "_id" : null, "number" : 3 } ], "ok" : 1 }


index 2d POIS:
db.poi_water.ensureIndex({"geometry.coordinates":"2d"})

index geojson:
db.tracks.ensureIndex({"geometry.coordinates":"2dsphere"})

LINKA le tracce nella collection falesie:

PROGETTAZIONE MONGODB
http://docs.mongodb.org/manual/tutorial/#data-modeling-patterns

db.tracce.find().forEach(function(track) {
	db.falesie.update({name: track.properties.name},{$push: {tracce: track._id} },false,true)
})

db.tracce.find().forEach(function(track) {
	for(var i in track.features)
		db.tracks.insert(track.features[i]);
})



db.tracce.update({},{$set:{'features.0.properties.tipo': 'avvicinamento' } },false,true)

Ritorna tracce di un place:
db.tracce.find({"properties.name":'tagliacozzo'},{"features.geometry":1})
Tutte le falesie collegate alle tracce:
db.tracce.find({},{"properties.name":1})


RICERCA TESTUALE:
http://blog.mongodb.org/post/40513621310/mongodb-text-search-experimental-feature-in-mongodb


db.falesie.find().forEach(function(doc) {
	db.falesie.update({name: doc.name}, {$set: {esp: NumberInt(Math.round(doc.esp.ang)) } },false,true)
})







